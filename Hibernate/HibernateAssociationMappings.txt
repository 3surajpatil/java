

	
one To One Association mapping.
================================

reference link :- https://dzone.com/tutorials/java/hibernate/hibernate-example/hibernate-mapping-one-to-one-using-annotations-1.html


---> In this mapping records will be idnetified by hibernate with help of foreign-key column.
---> foreign key column will be added in Student table. 
---> if name not supplied with @JoinColumn then hibernate will take property name as FIRST_CLASS_SECOND-CLASS.
---> also , we can specify property names above getters, that would be preffered. 
E.X.:- 
--->Association statement :- One Student Has only One Address. (Has a relationship between classes.)
so Student class will have Address class object as a data member.


@Entity
@Table(name = "STUDENT")
public class Student {

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="studentId")
	private long studentId;
	@Column(name="studentName")
	private String studentName;
	@OneToOne(cascade = CascadeType.ALL)  // this creates oneToone relationship between Student and Address.
	
	// below annotation is not mandatory , just in case you want to change name of collumn.
	// column will be created in Student table.
	@Joincolumn(name="Student_Address") 
	private Address studentAddress; 

	// getters and setters for bravity.
}


@Entity
@Table(name = "ADDRESS")
public class Address {

	@Id
	@GeneratedValue(strtegy=GenerationType.Auto)
	@Column(name="addressId")
	private long addressId;
	@Column(name="line1")
	private String line1;
	@Column(name="line2")
	private String line2;
	
	//getters and Setters for bravity.
}

---> in hibernate.cfg.xml please add these classes.
 <mapping class="package.Student" />
 <mapping class="package.Address" />
 
 
---> App.java(Application Executor.)
	Address address1 =new Address();
	address1.setLine1("some street and flat no.");
	address1.setLine2("some city and state with pin.");
	
	// create simmiler address2 object.
	
	Student student1=new Student();
	Student student2=new Student();
	
	student1.setName("student1_name");
	student1.setAddress(address1);// adding 1st address object here.
	student2.setName("student2_name");
	student2.setAddress(address2);// adding 2nd address object here.
	
	Transaction tx=ses.beginTransaction();
	ses.persist(student1);  ses.persist(student2);
	tx.commit();
	

 
One To Many Association Mapping.
=============================================


--->Association statement :-One Student can Have multiple phone numbers.



Solution 1:- Using Foreign Key.    [it will make 2 tables only.]
====================================================================
 
reference link :- https://www.javatpoint.com/hibernate-one-to-many-mapping-using-annotation-example

	@OneToMany(cascade = CascadeType.ALL)		
	@JoinColumn(name="STUDENT_ID")  // STUDENT_ID will be made as foreign key in  Phone table.  
	public Set<Phone> getStudentPhoneNumbers() {
		return this.studentPhoneNumbers;
	}

Note.---> Model Classes & other classes are available below with solution 2. those are same.  
 
 

Solution 2:- Using Reference Table. [it will make 3 tables]
====================================================================

reference link :- https://dzone.com/tutorials/java/hibernate/hibernate-example/hibernate-mapping-one-to-many-using-annotations-1.html

---> in this type of mapping , two tables will be created for two Entity classes. 
---> there will not be any foreign key. 
---> another table will be created i.e. 3rd table will be created with 
	 first-table-name_second-table-name. and primary keys of these two tables will be stored in two collumns.
---> @OneToMany annotation on the property of HAS-A relationship class will be enough. to perform this mapping. 
if we not use @JoinTable annotation then it will create 3rd table with default names.
 i.e. table name, primary_key column of table 1 & primary_key_of second column will be according to datamember/variable names. 	
---> @JoinTable annotation will be required to customize the default names that will be given to the 3rd table. 

E.X.:- 


POM.xml
---------
	<dependency>  
    <groupId>org.hibernate</groupId>  
    <artifactId>hibernate-core</artifactId>  
    <version>5.3.1.Final</version>  
	</dependency>  
	<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
	<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.12</version>
	</dependency>	 
	
	 
hibernate.cfg.xml
-------------------
<?xml version='1.0' encoding='UTF-8'?>  
<!DOCTYPE hibernate-configuration PUBLIC  
          "-//Hibernate/Hibernate Configuration DTD 5.3//EN"  
          "http://hibernate.sourceforge.net/hibernate-configuration-5.3.dtd">  
  
<!-- Generated by MyEclipse Hibernate Tools.                   -->  
<hibernate-configuration>  
  
    <session-factory>  
        <property name="hbm2ddl.auto">update</property>    
        <property name="dialect">org.hibernate.dialect.MariaDB53Dialect</property>    
        <property name="connection.url">jdbc:mysql://localhost/local_schema</property>    
        <property name="connection.username">root</property>    
        <property name="connection.password">root</property>    
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property> 
        <property name="show_sql">true</property>  
          
        <mapping class="in.tcampus.model.Student"/>  
        <mapping class="in.tcampus.model.Phone"/>  
          
    </session-factory>  
  
</hibernate-configuration>  
 
 
Student.java
----------------
 
 
 package in.tcampus.model;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.Table;

@Entity
@Table(name = "STUDENT")
public class Student {

	private long studentId;
	private String studentName;
	private Set<Phone> studentPhoneNumbers = new HashSet<Phone>(0);

	public Student() {
	}

	public Student(String studentName, Set<Phone> studentPhoneNumbers) {
		this.studentName = studentName;
		this.studentPhoneNumbers = studentPhoneNumbers;
	}

	@Id
	@GeneratedValue
	@Column(name = "STUDENT_ID")
	public long getStudentId() {
		return this.studentId;
	}

	public void setStudentId(long studentId) {
		this.studentId = studentId;
	}

	@Column(name = "STUDENT_NAME", nullable = false, length = 100)
	public String getStudentName() {
		return this.studentName;
	}

	public void setStudentName(String studentName) {
		this.studentName = studentName;
	}

	@OneToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "STUDENT_PHONE", joinColumns = { @JoinColumn(name = "STUDENT_ID") }, inverseJoinColumns = { @JoinColumn(name = "PHONE_ID") })
	public Set<Phone> getStudentPhoneNumbers() {
		return this.studentPhoneNumbers;
	}

	public void setStudentPhoneNumbers(Set<Phone> studentPhoneNumbers) {
		this.studentPhoneNumbers = studentPhoneNumbers;
	}

}

 
 Phone.java
 ---------------
 package in.tcampus.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "PHONE")
public class Phone {

	private long phoneId;
	private String phoneType;
	private String phoneNumber;

	public Phone() {
	}

	public Phone(String phoneType, String phoneNumber) {
		this.phoneType = phoneType;
		this.phoneNumber = phoneNumber;
	}
	
	@Id
	@GeneratedValue
	@Column(name = "PHONE_ID")
	public long getPhoneId() {
		return this.phoneId;
	}

	public void setPhoneId(long phoneId) {
		this.phoneId = phoneId;
	}

	@Column(name = "PHONE_TYPE", nullable = false, length=10)
	public String getPhoneType() {
		return this.phoneType;
	}

	public void setPhoneType(String phoneType) {
		this.phoneType = phoneType;
	}
	
	@Column(name = "PHONE_NUMBER", nullable = false, length=15)
	public String getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

}

App.java
----------

package in.tcampus;

import java.util.HashSet;
import java.util.Set;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import in.tcampus.model.Phone;
import in.tcampus.model.Student;
import in.tcampus.util.HibernateUtil;

public class App {

	public static void main(String[] args) {
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();

			Set<Phone> phoneNumbers = new HashSet<Phone>();
			phoneNumbers.add(new Phone("house", "32354353"));
			phoneNumbers.add(new Phone("mobile", "9889343423"));

			Student student = new Student("Eswar", phoneNumbers);
			session.save(student);
			
			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}

	}

}
 
 
 ---> to avoid configuration for session factory each time . created this utility class.
 
 
HibernateUtil.java
----------------------
 
package in.tcampus.util;

import org.hibernate.SessionFactory;
import org.hibernate.boot.Metadata;
import org.hibernate.boot.MetadataSources;
import org.hibernate.boot.registry.StandardServiceRegistry;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;

public class HibernateUtil {
	private static final SessionFactory sessionFactory;
	static {
		try {
			StandardServiceRegistry ssr=new StandardServiceRegistryBuilder().configure("hibernate.cfg.xml").build();
			Metadata metadata=new MetadataSources(ssr).buildMetadata();
			
			sessionFactory = metadata.buildSessionFactory();
					
		} catch (Throwable ex) {
			System.err.println("Initial SessionFactory creation failed." + ex);
			throw new ExceptionInInitializerError(ex);
		}
	}

	public static SessionFactory getSessionFactory() {
		return sessionFactory;
	}
}
 
 

 Many To Many Association mapping.
================================

 --->Association statement :- One Student can have many Courses & One Course can have many Students.

 reference link :- https://dzone.com/tutorials/java/hibernate/hibernate-example/hibernate-mapping-many-to-many-using-annotations-1.html
 
 
 Student.java
 --------------
 public class Student {

	private long studentId;
	private String studentName;
	private Set<Course> courses = new HashSet<Course>(0);

	@Id
	@GeneratedValue
	@Column(name = "STUDENT_ID")
	public long getStudentId() {
		return this.studentId;
	}
	... other getters and setters.
	
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "STUDENT_COURSE", joinColumns = { @JoinColumn(name = "STUDENT_ID") }, inverseJoinColumns = { @JoinColumn(name = "COURSE_ID") })	
	public Set<Course> getCourses() {
		return this.courses;
	}
 
	Course.java
	------------
@Entity
@Table(name="COURSE")
public class Course {

	private long courseId;
	private String courseName;

	// some constructors if required. 
	//getters and setters.
	
	@Id
	@GeneratedValue  //// this class will have it's own id.
	@Column(name="COURSE_ID")
	public long getCourseId() {
		return this.courseId;
	}
	
	@Column(name="COURSE_NAME", nullable=false)  
	public String getCourseName() {
		return this.courseName;
	}
 
 
 hibernate.cfg.xml
 ------------------
 <mapping class="in.tcampus.model.Student"/>  
 <mapping class="in.tcampus.model.Course"/>  


 App.java.
 -----------
 
 Note:- HibernateUtil can be found in above One to Many example. 
 
public class App {

	public static void main(String[] args) {
		Session session = HibernateUtil.getSessionFactory().openSession();
		Transaction transaction = null;
		try {
			transaction = session.beginTransaction();

			Set<Course> courses = new HashSet<Course>();
			courses.add(new Course("Maths"));
			courses.add(new Course("Computer Science"));

			Student student1 = new Student("Eswar", courses);
			Student student2 = new Student("Joe", courses);
			session.save(student1);
			session.save(student2);

			transaction.commit();
		} catch (HibernateException e) {
			transaction.rollback();
			e.printStackTrace();
		} finally {
			session.close();
		}
	}
}

 